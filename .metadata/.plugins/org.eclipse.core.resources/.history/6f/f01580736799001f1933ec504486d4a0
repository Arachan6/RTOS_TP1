#include <stdio.h>
#include <stdint.h>
#include <stdbool.h>

#include "main.h"
#include "cmsis_os.h"
#include "board.h"
#include "logger.h"
#include "dwt.h"

#include "task_ui.h"
#include "task_button.h"
#include "task_red_led.h"
#include "task_green_led.h"
#include "task_blue_led.h"

#define AO_UI_QUEUE_LENGTH_    (5)
#define AO_UI_QUEUE_ITEM_SIZE_ (sizeof(ao_ui_message_t))

extern ao_red_led_handle_t ao_red_led_h;
extern ao_green_led_handle_t ao_green_led_h;
extern ao_blue_led_handle_t ao_blue_led_h;



void task_ui(void *argument){
	ao_ui_message_t ao_message;
	while (true){
		if(pdTRUE == xSemaphoreTake(hsem_button_pulse, 0))
			{
			LOGGER_INFO("ui led red activate");
			xSemaphoreGive(hsem_led_red);
			}

		if(pdTRUE == xSemaphoreTake(hsem_button_short, 0))
			{
			LOGGER_INFO("ui led green activate");
			xSemaphoreGive(hsem_led_green);
			}

		if(pdTRUE == xSemaphoreTake(hsem_button_long, 0))
			{
			LOGGER_INFO("ui led blue activate");
			xSemaphoreGive(hsem_led_blue);
			}
		}
}

bool ao_ui_send(ao_ui_handle_t *hao, ao_ui_message_t msg)
{
    return (pdPASS == xQueueSend(hao->hqueue, (void *)&msg, 0));
}

void ao_ui_init(ao_ui_handle_t *hao)
{
    hao->hqueue = xQueueCreate(AO_UI_QUEUE_LENGTH_, AO_UI_QUEUE_ITEM_SIZE_);
    while (NULL == hao->hqueue)
    {
        // error
    }

    BaseType_t status;
    status = xTaskCreate(task_ui, "task_ao_ui", 128, (void * const)hao, tskIDLE_PRIORITY + 2, NULL);
    while (pdPASS != status)
    {
        // error
    }
}

